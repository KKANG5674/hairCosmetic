package semiProject;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JOptionPane;

import semiProject.OrderDTO;


//DAO 클래스 : 데이타 저장소를 이용하여 데이타 삽입,삭제,변경,검색 기능을 제공하는 클래스

//PHONEBOOK 테이블의 행 삽입,삭제,변경,검색 기능의 메소드를 제공하는 클래스
// => 싱글톤 클래스로 작성하는 것을 권장
public class OrderDAO extends JdbcDAO {
	private static OrderDAO _dao;
	
	private OrderDAO() {
		// TODO Auto-generated constructor stub
	}
	
	static {
		_dao=new OrderDAO();
	}
	
	public static OrderDAO getDAO() {
		return _dao;
	}
	
	//주문하기 (insert) 메소드
	public void insertorder(OrderDTO order) throws SQLException {
		Connection con = null;
		PreparedStatement pstmt = null;

		try {
			con =getConnection();
			
			con.setAutoCommit(false);
			String query = "insert into ordertable values(ordertable_seq.nextval,sysdate,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,'결제대기','배송준비')";
			pstmt = con.prepareStatement(query);
			//pstmt.setString(1, order.getId());
			pstmt.setString(1, order.getId());
			pstmt.setString(2, order.getHairType());
			pstmt.setString(3, order.getHairBold());
			pstmt.setString(4, order.getHairDamage());
			pstmt.setString(5, order.getHeadType());
			pstmt.setString(6, order.getProductFuntion());
			pstmt.setString(7, order.getShampooColor());
			pstmt.setString(8, order.getConditionColor());
			pstmt.setString(9, order.getSmell());
			pstmt.setString(10, order.getSmellPower());
			pstmt.setString(11, order.getCodeName());
			pstmt.setString(12, order.getHashTagOne());
			pstmt.setString(13, order.getHashTagTwo());
			pstmt.setString(14, order.getHashTagThree());
			pstmt.setString(15, order.getProSelect());
			pstmt.setString(16, order.getName());
			pstmt.setString(17, order.getPhone());
			pstmt.setString(18, order.getPostalCode());
			pstmt.setString(19, order.getAddress());
			pstmt.setString(20, order.getDetailAddress());
			pstmt.setString(21, order.getMessage());
			pstmt.setString(22, order.getDepositBank());
			pstmt.setString(23, order.getDepositName());
			pstmt.setString(24, order.getTotalCash());
			pstmt.executeUpdate();
			con.commit();
		} catch (Exception e) {
			con.rollback();
			System.out.println("[에러] qryInsert() 메소드의 SQL 오류" + e.getMessage());
		} finally {
			close(con, pstmt);
		}
	}

	/* 관리자 main 페이지에서 쓸 메소드 */
	/* 입금 전 */
	public int getOrderBefore() {
	    Connection con = null;
	    PreparedStatement pstmt = null;
	    ResultSet rs = null;
	    int rows = 0;
	    try {
            con = getConnection();
            
            String sql = "select count(*) from ordertable where payment='결제대기'";
            pstmt = con.prepareStatement(sql);
            
            rs = pstmt.executeQuery();

            if (rs.next()) {
                rows = rs.getInt(1);
            }
        } catch (SQLException e) {
            System.out.println("[에러] getOrderBefore() 메소드의 SQL 오류");
        } finally {
            close(con, pstmt, rs);
        }
	    return rows;
	}

	/* 배송준비 */
	public int getOrderReady() {
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int rows = 0;
        try {
            con = getConnection();
            
            String sql = "select count(*) from ordertable where delivery='배송준비' and payment!='결제대기'";
            pstmt = con.prepareStatement(sql);
            
            rs = pstmt.executeQuery();

            if (rs.next()) {
                rows = rs.getInt(1);
            }
        } catch (SQLException e) {
            System.out.println("[에러] getOrderReady() 메소드의 SQL 오류");
        } finally {
            close(con, pstmt, rs);
        }
        return rows;
    }
	/* 배송중/ 배송완료 */
	public int getOrderDo() {
	    Connection con = null;
	    PreparedStatement pstmt = null;
	    ResultSet rs = null;
	    int rows = 0;
	    try {
	        con = getConnection();
	        
	        String sql = "select count(*) from ordertable where delivery='배송중' and payment!='결제대기'";
	        pstmt = con.prepareStatement(sql);
	        
	        rs = pstmt.executeQuery();
	        
	        if (rs.next()) {
	            rows = rs.getInt(1);
	        }
	    } catch (SQLException e) {
	        System.out.println("[에러] getOrderDo() 메소드의 SQL 오류");
	    } finally {
	        close(con, pstmt, rs);
	    }
	    return rows;
	}
	/* 배송완료 */
	public int getOrderDone() {
	    Connection con = null;
	    PreparedStatement pstmt = null;
	    ResultSet rs = null;
	    int rows = 0;
	    try {
	        con = getConnection();
	        
	        String sql = "select count(*) from ordertable where delivery='배송완료' and payment!='결제대기'";
	        pstmt = con.prepareStatement(sql);
	        
	        rs = pstmt.executeQuery();
	        
	        if (rs.next()) {
	            rows = rs.getInt(1);
	        }
	    } catch (SQLException e) {
	        System.out.println("[에러] getOrderDone() 메소드의 SQL 오류");
	    } finally {
	        close(con, pstmt, rs);
	    }
	    return rows;
	}
}


