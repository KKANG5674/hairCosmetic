package notice;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.sun.org.apache.regexp.internal.RE;

import semiProject.JdbcDAO;

//DAO 클래스 : 데이타 저장소를 이용하여 데이타 삽입,삭제,변경,검색 기능을 제공하는 클래스

public class NoticeDAO extends JdbcDAO {
    private static NoticeDAO _dao;
    
    private NoticeDAO() {
        // TODO Auto-generated constructor stub
    }
    
    public static NoticeDAO getDAO() {
        if(_dao==null) {
            _dao=new NoticeDAO();
        }
        return _dao;
    }
    
    // 삽입
    public void insertNotice(NoticeDTO notice) throws SQLException {
        Connection con = null;
        PreparedStatement pstmt = null; 

        try {
            con =getConnection();
            
            con.setAutoCommit(false);
            String query = "insert into noticetable values(noticetable_seq.nextval,?,?,?,?,sysdate)";
            pstmt = con.prepareStatement(query);
            pstmt.setString(1, notice.getTitle());
            pstmt.setString(2, notice.getContent());
            pstmt.setInt(3, notice.getCount());
            pstmt.setString(4, notice.getId());
                        
            pstmt.executeUpdate();
            con.commit();
        } catch (Exception e) {
            con.rollback();
            System.out.println("[에러] qryInsert() 메소드의 SQL 오류" + e.getMessage());
        } finally {
            close(con, pstmt);
        }
    }
    
    // 수정
    public int updateNotice(NoticeDTO notice) {
        Connection con=null;
        PreparedStatement pstmt=null;
        int rows=0;
        try {
            con=getConnection();
            
            String query="update noticetable set title=?,content=?,count=?,id=?, dateCreated=sysdate where num=?";
            pstmt=con.prepareStatement(query);
            //pstmt.setString(1, student.getName());
            pstmt.setString(1, notice.getTitle());
            pstmt.setString(2, notice.getContent());
            pstmt.setInt(3, notice.getCount());
            pstmt.setString(4, notice.getId());
            pstmt.setInt(5, notice.getNum());

            rows=pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println("[에러]updateStudent() 메소드의 SQL 오류 = "+e.getMessage());
        } finally {
            close(con, pstmt);
        }
        return rows;
    }
    
    // 삭제
    public int deleteNotice(int num) {
        Connection con=null;
        PreparedStatement pstmt=null;
        int rows=0;
        try {
            con=getConnection();
            
            String query="delete from noticetable where num=?";
            pstmt=con.prepareStatement(query);
            pstmt.setInt(1, num);
            
            rows=pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println("[에러]deleteStudent() 메소드의 SQL 오류 = "+e.getMessage());
        } finally {
            close(con, pstmt);
        }
        return rows;
    }

    // 제목 검색
    public List<NoticeDTO> selectTitleNotice(String title) {
        Connection con=null;
        PreparedStatement pstmt=null;
        ResultSet rs=null;
        List<NoticeDTO> noticeList=new ArrayList<NoticeDTO>();
        try {
            con=getConnection();
                    
            String query="select * from noticetable where title like '%'||?||'%' order by num";
            pstmt=con.prepareStatement(query);
            pstmt.setString(1, title);
            
            rs=pstmt.executeQuery();
            
            while(rs.next()) {
                // 검색행을 DTO 인스턴스에 저장
                NoticeDTO notice = new NoticeDTO();
                notice.setNum(rs.getInt("num"));
                notice.setTitle(rs.getString("title"));
                notice.setContent(rs.getString("content"));
                notice.setCount(rs.getInt("count"));
                notice.setDateCreated(rs.getDate("dateCreated"));
                // List 인스턴스에 DTO 인스턴스를 요소로 추가
                noticeList.add(notice);
            }
        } catch (SQLException e) {
            System.out.println("[에러]selectNoStudent() 메소드의 SQL 오류 = "+e.getMessage());
        } finally {
            close(con, pstmt, rs);
        }
        return noticeList;
    }
    
    // 내용 검색
    public List<NoticeDTO> selectcontentNotice(String content) {
        Connection con=null;
        PreparedStatement pstmt=null;
        ResultSet rs=null;
        List<NoticeDTO> noticeList=new ArrayList<NoticeDTO>();
        try {
            con=getConnection();
            
            String query="select * from noticetable where content like '%'||?||'%' order by num";
            pstmt=con.prepareStatement(query);
            pstmt.setString(1, content);
            
            rs=pstmt.executeQuery();
            
            while(rs.next()) {
                // 검색행을 DTO 인스턴스에 저장
                NoticeDTO notice = new NoticeDTO();
                notice.setNum(rs.getInt("num"));
                notice.setTitle(rs.getString("title"));
                notice.setContent(rs.getString("content"));
                notice.setCount(rs.getInt("count"));
                notice.setDateCreated(rs.getDate("dateCreated"));
                // List 인스턴스에 DTO 인스턴스를 요소로 추가
                noticeList.add(notice);
            }
        } catch (SQLException e) {
            System.out.println("[에러]selectNoStudent() 메소드의 SQL 오류 = "+e.getMessage());
        } finally {
            close(con, pstmt, rs);
        }
        return noticeList;
    }
    
    // 모든 행 검색
    public List<NoticeDTO> selectAllNotice() {
        Connection con=null;
        PreparedStatement pstmt=null;
        ResultSet rs=null;
        List<NoticeDTO> noticeList=new ArrayList<NoticeDTO>();
        try {
            con=getConnection();
                    
            String query="select * from noticetable order by num";
            pstmt=con.prepareStatement(query);
            
            rs=pstmt.executeQuery();
            
            while(rs.next()) {
                NoticeDTO notice = new NoticeDTO();
                //student.setNo(rs.getInt("no"));
                notice.setNum(rs.getInt("num"));
                notice.setTitle(rs.getString("title"));
                notice.setContent(rs.getString("content"));
                notice.setCount(rs.getInt("count"));
                notice.setDateCreated(rs.getDate("dateCreated"));
                noticeList.add(notice);
            }
        } catch (SQLException e) {
            System.out.println("[에러]selectAllStudent() 메소드의 SQL 오류 = "+e.getMessage());
        } finally {
            close(con, pstmt, rs);
        }
        return noticeList;
    }
    // NOTICE 테이블에 저장된 전체 게시글의 갯수를 검색하여 반환하는 메소드
    public int getNoticeTotal() {
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int rows = 0;
        try {
            con = getConnection();
            
            String sql = "select count(*) from noticetable";
            pstmt = con.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            if(rs.next()) {
                rows = rs.getInt(1);
            }
        } catch (SQLException e) {
            System.out.println("[에러] getNoticeTotal() 메소드의 SQL 오류");
        } finally {
            close(con, pstmt, rs);
        }
        return rows;
    }
    //시작 행번호와 종료 행번호를 전달받아 NOTICE 테이블에 저장된 게시글 목록을 검색하여 반환하는 메소드
    // => 테이블에 저장된 행에 대한 페이징 처리
    public List<NoticeDTO> getNoticeList(int startRow, int endRow) {
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        List<NoticeDTO> noticeList = new ArrayList<NoticeDTO>();
        try {
            con = getConnection();
            
            // sql문 수정
            String sql = "select * from (select rownum rn, temp. * from (select * from noticetable) where rn between ? and ?";
            pstmt = con.prepareStatement(sql);
            pstmt.setInt(1, startRow);
            pstmt.setInt(2, endRow);
            
            rs = pstmt.executeQuery();
            
            while(rs.next()) {
                NoticeDTO notice = new NoticeDTO();
                //student.setNo(rs.getInt("no"));
                notice.setNum(rs.getInt("num"));
                notice.setTitle(rs.getString("title"));
                notice.setContent(rs.getString("content"));
                notice.setCount(rs.getInt("count"));
                notice.setDateCreated(rs.getDate("dateCreated"));
                noticeList.add(notice);
            }
            
            
        } catch (SQLException e) {
            System.out.println("[에러]getNoticeList() 메소드의 SQL 오류 = "+e.getMessage());
        } finally {
            close(con, pstmt, rs);
        }
        return noticeList;  
    }
    
    
}


